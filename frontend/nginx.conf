# IndoWater Frontend - Nginx Configuration
# Place this in: /etc/nginx/sites-available/indowater
# Then: sudo ln -s /etc/nginx/sites-available/indowater /etc/nginx/sites-enabled/
# Test: sudo nginx -t
# Restart: sudo systemctl restart nginx

server {
    listen 80;
    listen [::]:80;
    
    # Replace with your domain
    server_name yourdomain.com www.yourdomain.com;
    
    # Web root - change this to your actual path
    root /var/www/html;
    index index.html;
    
    # Logs
    access_log /var/log/nginx/indowater-access.log;
    error_log /var/log/nginx/indowater-error.log;
    
    # GZIP Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/javascript application/json;
    gzip_disable "MSIE [1-6]\.";
    
    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # SPA routing - serve index.html for all routes
    location / {
        try_files $uri $uri/ /index.html;
        
        # No cache for HTML
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires 0;
    }
    
    # Cache static assets
    location /static/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }
    
    # Cache images
    location ~* \.(jpg|jpeg|png|gif|webp|svg|ico)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }
    
    # Cache fonts
    location ~* \.(woff|woff2|ttf|otf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }
    
    # Cache CSS and JS
    location ~* \.(css|js)$ {
        expires 1M;
        add_header Cache-Control "public, immutable";
        access_log off;
    }
    
    # Proxy API requests to backend (optional)
    # Uncomment if you want to proxy /api requests to Render backend
    # location /api {
    #     proxy_pass https://indowater-backend.onrender.com;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection 'upgrade';
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     proxy_cache_bypass $http_upgrade;
    # }
    
    # Security: Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Security: Deny access to backup files
    location ~* \.(bak|config|sql|sh|log|swp)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# SSL Configuration (after getting certificate with Certbot)
# Uncomment this after running: sudo certbot --nginx -d yourdomain.com
#
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     
#     server_name yourdomain.com www.yourdomain.com;
#     
#     ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
#     ssl_trusted_certificate /etc/letsencrypt/live/yourdomain.com/chain.pem;
#     
#     # SSL Settings (Mozilla Intermediate)
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     ssl_stapling on;
#     ssl_stapling_verify on;
#     
#     # HSTS (optional, 31536000 seconds = 1 year)
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#     
#     # Rest of configuration same as above...
#     root /var/www/html;
#     index index.html;
#     
#     location / {
#         try_files $uri $uri/ /index.html;
#     }
#     
#     # ... (copy all other location blocks from above)
# }
#
# # HTTP to HTTPS redirect
# server {
#     listen 80;
#     listen [::]:80;
#     server_name yourdomain.com www.yourdomain.com;
#     return 301 https://$server_name$request_uri;
# }
